# Generated by Django 4.0.3 on 2022-04-20 05:08

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BloodBankModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('BloodBankName', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='firstname must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('BloodBankRegistrationNumber', models.IntegerField()),
                ('BloodBankEmailId', models.EmailField(max_length=40)),
                ('BloodBankContactNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('BloodBankWebsiteUrl', models.URLField()),
                ('RegisterUsername', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='firstname must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('RegisterPassword', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('ConfirmedPassword', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('UploadBloodBankImages', models.ImageField(upload_to='')),
                ('UploadRegistrationDocuments', models.FileField(upload_to='')),
                ('DeviceToken', models.CharField(default=None, max_length=255)),
            ],
            options={
                'db_table': 'Partner_bloodbank',
            },
        ),
        migrations.CreateModel(
            name='Clinic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ClinicName', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='firstname must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('ClinicRegistrationNumber', models.IntegerField()),
                ('ClinicEmailId', models.EmailField(max_length=50)),
                ('ClinicContactNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('ClinicWebsiteUrl', models.URLField()),
                ('RegisterUsername', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='firstname must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('RegisterPassword', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('ConfirmedPassword', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('UploadClinicImages', models.ImageField(upload_to='')),
                ('UploadRegisterationDocuments', models.FileField(upload_to='')),
                ('DeviceToken', models.CharField(default=None, max_length=255)),
            ],
            options={
                'db_table': 'Partner_clinic',
            },
        ),
        migrations.CreateModel(
            name='GymModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('GymName', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='gym name must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('GymRegistration', models.CharField(max_length=200)),
                ('GymPhyarmacyEamilId', models.EmailField(max_length=50)),
                ('GymContact', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('GymWebsiteUrl', models.URLField()),
                ('RegisterUsername', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='gym name must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('RegisterPassword', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('ConfirmedPassword', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('UploadGymImages', models.ImageField(upload_to='')),
                ('UploadRegisterationDocuments', models.FileField(upload_to='')),
                ('DeviceToken', models.CharField(default=None, max_length=255)),
            ],
            options={
                'db_table': 'Partner_Gym',
            },
        ),
        migrations.CreateModel(
            name='InsuranceRegistrationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('InsuranceCompanyName', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='firstname must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('InsuranceCompanyRegistrationNumber', models.IntegerField()),
                ('InsuranceCompanyEmailId', models.EmailField(max_length=50)),
                ('InsuranceCompanyContact', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('InsuranceCompanyWebsiteUrl', models.URLField()),
                ('RegisteredUsername', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='firstname must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('RegisteredPassword', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('ConfirmedPassword', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('UploadInsuranceCompanyImages', models.ImageField(upload_to='')),
                ('UploadRegistrationDocument', models.FileField(upload_to='')),
                ('DeviceToken', models.CharField(default=None, max_length=255)),
            ],
            options={
                'db_table': 'Insurence_Company',
            },
        ),
        migrations.CreateModel(
            name='MedicalEquipmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ProviderName', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator(message='firstname must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('ProviderRegistration', models.CharField(max_length=100)),
                ('ProviderEmailId', models.EmailField(max_length=100)),
                ('ProviderContact', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('ProviderWebsiteUrl', models.URLField()),
                ('RegisteredUsername', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='firstname must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('RegisteredPassword', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('ConfirmedPassword', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('UploadEquipmentProviderImages', models.ImageField(upload_to='')),
                ('UploadRegisteredDocuments', models.FileField(upload_to='')),
                ('DeviceToken', models.CharField(default=None, max_length=255)),
            ],
            options={
                'db_table': 'MedicalEquipment_table',
            },
        ),
        migrations.CreateModel(
            name='PharmacyModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PharmacyName', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='PharmacyName must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('PharmacyRegistrationNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('PharmacyEmailId', models.EmailField(max_length=50)),
                ('PharmacyContactNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('PharmacyWebsiteUrl', models.URLField()),
                ('RegisterUsername', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='PharmacyName must string and should not be less than 3 and greater than 100', regex='^(?=.{2,12}$)(?![_.])(?!.*[_.]{2})[a-zA-Z]+(?<![_.])$')])),
                ('RegisterPassword', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('ConfirmedPassword', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='password must contain 8 letters and a captail letter and a special character ', regex='^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$')])),
                ('UploadPharmacyImages', models.ImageField(upload_to='')),
                ('UploadRegisterationDocuments', models.FileField(upload_to='')),
                ('DeviceToken', models.CharField(default=None, max_length=255)),
            ],
            options={
                'db_table': 'Partner_Pharmacy',
            },
        ),
        migrations.CreateModel(
            name='TypeOfPartner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TypeOfPartners', models.CharField(choices=[('Clinic', 'Clinic'), ('Hospital', 'Hospital'), ('Diagnostic', 'Diagnostic'), ('pharmacy', 'pharmacy'), ('Medical Surgical Equipment Provider', 'Medical Surgical Equipment Provider'), ('Blood Bank', 'Blood Bank'), ('Emergency Services', 'Emergency Services'), ('Gyms And Fitness Center', 'Gyms And Fitness Center'), ('Insurance', 'Insurance')], default='Clinic', max_length=100)),
            ],
            options={
                'db_table': 'Type_Of_Partner',
            },
        ),
        migrations.CreateModel(
            name='AddProfileInsuranceModel',
            fields=[
                ('State', models.CharField(max_length=255)),
                ('City', models.CharField(max_length=255)),
                ('Country', models.CharField(max_length=255)),
                ('Zipcode', models.IntegerField()),
                ('Address', models.CharField(max_length=500)),
                ('PrimaryContactNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('InsuranceId', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='Insurance', serialize=False, to='partners.insuranceregistrationmodel')),
            ],
            options={
                'db_table': 'InsuranceProfile_table',
            },
        ),
        migrations.CreateModel(
            name='ClinicProfile',
            fields=[
                ('State', models.CharField(max_length=255)),
                ('City', models.CharField(max_length=255)),
                ('Country', models.CharField(max_length=255)),
                ('Zipcode', models.IntegerField()),
                ('Address', models.CharField(max_length=500)),
                ('PrimaryContactNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('ClinicId', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='Profile', serialize=False, to='partners.clinic')),
            ],
            options={
                'db_table': 'Clinic_Profile',
            },
        ),
        migrations.CreateModel(
            name='MedicalAuthorizedModel',
            fields=[
                ('medicalid', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='medicalauthorized', serialize=False, to='partners.medicalequipmentmodel')),
                ('FirstName', models.CharField(max_length=200)),
                ('LastName', models.CharField(max_length=255)),
                ('EmailId', models.EmailField(max_length=50)),
                ('MobileNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
            ],
            options={
                'db_table': 'medicalauthorized_table',
            },
        ),
        migrations.CreateModel(
            name='Medicalprofile',
            fields=[
                ('State', models.CharField(max_length=255)),
                ('City', models.CharField(max_length=255)),
                ('Country', models.CharField(max_length=255)),
                ('Zipcode', models.IntegerField()),
                ('Address', models.CharField(max_length=500)),
                ('PrimaryContactNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('medicalid', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='medicalprofile', serialize=False, to='partners.medicalequipmentmodel')),
            ],
            options={
                'db_table': 'medical_profile',
            },
        ),
        migrations.CreateModel(
            name='MedicalOtpModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('verified', models.BooleanField(default=False)),
                ('MedicalEquipmentId', models.ForeignKey(default=True, on_delete=django.db.models.deletion.CASCADE, related_name='MedicalEquipment', to='partners.medicalequipmentmodel')),
            ],
            options={
                'db_table': 'MedicalOtp_table',
            },
        ),
        migrations.CreateModel(
            name='InsuranceOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('verified', models.BooleanField(default=False)),
                ('InsuranceId', models.ForeignKey(default=True, on_delete=django.db.models.deletion.CASCADE, related_name='InsuranceOtp', to='partners.insuranceregistrationmodel')),
            ],
            options={
                'db_table': 'InsuranceOtp_table',
            },
        ),
        migrations.CreateModel(
            name='GymOtpModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('verified', models.BooleanField(default=False)),
                ('GymId', models.ForeignKey(default=True, on_delete=django.db.models.deletion.CASCADE, related_name='gymotp', to='partners.gymmodel')),
            ],
            options={
                'db_table': 'GymOtpTable',
            },
        ),
        migrations.CreateModel(
            name='GymAuthorizedModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FirstName', models.CharField(max_length=200)),
                ('LastName', models.CharField(max_length=255)),
                ('EmailId', models.EmailField(max_length=50)),
                ('MobileNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('GymId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gymauthid', to='partners.gymmodel')),
            ],
            options={
                'db_table': 'gym_authorized_table',
            },
        ),
        migrations.CreateModel(
            name='EmailVerifyTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('verified', models.BooleanField(default=False)),
                ('UserId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PharmacyModelId', to='partners.pharmacymodel')),
            ],
            options={
                'db_table': 'Pharmacyemailtb',
            },
        ),
        migrations.CreateModel(
            name='BloodBankOtpTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('verified', models.BooleanField(default=False)),
                ('BloodBankId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bloodbank', to='partners.bloodbankmodel')),
            ],
            options={
                'db_table': 'otp_bloodbank',
            },
        ),
        migrations.CreateModel(
            name='BloodBankAuthorizedModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FirstName', models.CharField(max_length=200)),
                ('LastName', models.CharField(max_length=255)),
                ('EmailId', models.EmailField(max_length=50)),
                ('MobileNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('BloodBankId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Bloodbankdetails', to='partners.bloodbankmodel')),
            ],
            options={
                'db_table': 'bloodbankauthorized_table',
            },
        ),
        migrations.CreateModel(
            name='AuthorizedModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FirstName', models.CharField(max_length=200)),
                ('LastName', models.CharField(max_length=255)),
                ('EmailId', models.EmailField(max_length=50)),
                ('MobileNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('ClinicId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Clinicid', to='partners.clinic')),
            ],
            options={
                'db_table': 'authorized_table',
            },
        ),
        migrations.CreateModel(
            name='AuthorisedPersonModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FirstName', models.CharField(max_length=30)),
                ('LastName', models.CharField(max_length=30)),
                ('EmailId', models.EmailField(max_length=254)),
                ('PhoneNumber', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 14 digits allowed.", regex='^\\+?1?\\d{9,14}$')])),
                ('InsuranceId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='InsurenceId', to='partners.insuranceregistrationmodel')),
            ],
            options={
                'db_table': 'AuthorisedReg_table',
            },
        ),
    ]
